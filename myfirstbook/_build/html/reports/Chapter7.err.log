Traceback (most recent call last):
  File "/home/codespace/.cache/pypoetry/virtualenvs/python-book-eng-Xz8nEEY6-py3.10/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/home/codespace/.cache/pypoetry/virtualenvs/python-book-eng-Xz8nEEY6-py3.10/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/home/codespace/.cache/pypoetry/virtualenvs/python-book-eng-Xz8nEEY6-py3.10/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/local/python/3.10.13/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/codespace/.cache/pypoetry/virtualenvs/python-book-eng-Xz8nEEY6-py3.10/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/home/codespace/.cache/pypoetry/virtualenvs/python-book-eng-Xz8nEEY6-py3.10/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/home/codespace/.cache/pypoetry/virtualenvs/python-book-eng-Xz8nEEY6-py3.10/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import networkx as nx
import matplotlib.pyplot as plt
from collections import deque

def bfs(graph, start):
    visited = set()                     # Set to store visited nodes
    queue = deque([start])              # Initialize queue with starting node
    visited.add(start)                  # Mark starting node as visited

    G = nx.Graph()                      # Create an undirected graph object
    G.add_nodes_from(graph.keys())      # Add nodes to the graph

    while queue:                        # Continue until queue is empty
        node = queue.popleft()          # Dequeue a node from the queue

        for neighbor in graph[node]:    # Explore neighbors of the current node
            if neighbor not in visited: # If neighbor is not visited
                queue.append(neighbor)  # Enqueue the neighbor
                visited.add(neighbor)   # Mark neighbor as visited
                G.add_edge(node, neighbor)  # Add edge to the graph

    return G

# Example graph represented as an adjacency list
graph = {
    '0': ['1', '3'],
    '1': ['2', '4'],
    '2': ['5'],
    '3': ['4'],
    '4': ['5'],
    '5': []
}

start_node = '0'
print("BFS Traversal:")
bfs_graph = bfs(graph, start_node)    # Get the BFS traversal graph
pos = nx.spring_layout(bfs_graph)     # Calculate node positions

# Draw the graph
nx.draw(bfs_graph, pos, with_labels=True, node_size=1000, node_color='skyblue', font_size=12, font_weight='bold', arrowsize=20)

# Show the graph
plt.title("BFS Traversal Graph")
plt.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
Cell [0;32mIn[2], line 1[0m
[0;32m----> 1[0m [38;5;28;01mimport[39;00m [38;5;21;01mnetworkx[39;00m [38;5;28;01mas[39;00m [38;5;21;01mnx[39;00m
[1;32m      2[0m [38;5;28;01mimport[39;00m [38;5;21;01mmatplotlib[39;00m[38;5;21;01m.[39;00m[38;5;21;01mpyplot[39;00m [38;5;28;01mas[39;00m [38;5;21;01mplt[39;00m
[1;32m      3[0m [38;5;28;01mfrom[39;00m [38;5;21;01mcollections[39;00m [38;5;28;01mimport[39;00m deque

[0;31mModuleNotFoundError[0m: No module named 'networkx'

